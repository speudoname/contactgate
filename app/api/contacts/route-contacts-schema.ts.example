// ALTERNATIVE VERSION: If you have a separate 'contacts' schema in Supabase
// This shows how to properly access tables in non-public schemas

import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY!

// For non-public schemas, you need to specify the schema in the client options
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  },
  db: {
    schema: 'contacts'  // Set the default schema to 'contacts'
  }
})

// Alternative: Create a client for each schema
const supabasePublic = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  },
  db: {
    schema: 'public'
  }
})

const supabaseContacts = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  },
  db: {
    schema: 'contacts'
  }
})

export async function GET(request: NextRequest) {
  try {
    const tenantId = request.headers.get('x-tenant-id')
    
    if (!tenantId) {
      return NextResponse.json({ error: 'Unauthorized - No tenant ID' }, { status: 401 })
    }

    // Option 1: Use the client with contacts schema as default
    const { data: contacts, error } = await supabase
      .from('contacts')  // This will access contacts.contacts
      .select('*')
      .eq('tenant_id', tenantId)
      .order('created_at', { ascending: false })

    // Option 2: Use schema-specific client
    const { data: contactsAlt, error: errorAlt } = await supabaseContacts
      .from('contacts')  // This will access contacts.contacts
      .select('*')
      .eq('tenant_id', tenantId)
      .order('created_at', { ascending: false })

    // Option 3: Use RPC to query across schemas
    const { data: contactsRpc, error: errorRpc } = await supabasePublic
      .rpc('get_contacts_from_schema', {
        p_tenant_id: tenantId
      })

    if (error) {
      console.error('Error fetching contacts:', error)
      return NextResponse.json({ 
        error: 'Database error', 
        details: error.message,
        code: error.code 
      }, { status: 500 })
    }

    return NextResponse.json({ contacts: contacts || [] })
  } catch (error) {
    console.error('Error in contacts API:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

export async function POST(request: NextRequest) {
  try {
    const tenantId = request.headers.get('x-tenant-id')
    const userId = request.headers.get('x-user-id')
    
    if (!tenantId || !userId) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    
    // Create new contact in the contacts schema
    const { data: contact, error } = await supabase
      .from('contacts')  // This accesses contacts.contacts
      .insert({
        tenant_id: tenantId,
        email: body.email,
        first_name: body.first_name,
        last_name: body.last_name,
        phone: body.phone,
        company: body.company,
        job_title: body.job_title,
        lifecycle_stage: body.lifecycle_stage || 'subscriber',
        source: body.source || 'manual',
        email_opt_in: body.email_opt_in || false,
        notes: body.notes
      })
      .select()
      .single()

    if (error) {
      console.error('Error creating contact:', error)
      return NextResponse.json({ error: 'Failed to create contact' }, { status: 500 })
    }

    // Log event in the contacts schema
    await supabase
      .from('events')  // This accesses contacts.events
      .insert({
        tenant_id: tenantId,
        contact_id: contact.id,
        event_type: 'contact.created',
        event_category: 'system',
        source_app: 'contacts',
        properties: {
          created_by: userId
        }
      })

    return NextResponse.json({ contact })
  } catch (error) {
    console.error('Error in contacts API:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

// SQL function that could be created to access contacts schema from public schema:
/*
CREATE OR REPLACE FUNCTION public.get_contacts_from_schema(p_tenant_id UUID)
RETURNS TABLE (
  id UUID,
  tenant_id UUID,
  email TEXT,
  first_name TEXT,
  last_name TEXT,
  full_name TEXT,
  company TEXT,
  job_title TEXT,
  lifecycle_stage TEXT,
  created_at TIMESTAMPTZ
) AS $$
BEGIN
  RETURN QUERY
  SELECT 
    c.id,
    c.tenant_id,
    c.email,
    c.first_name,
    c.last_name,
    c.full_name,
    c.company,
    c.job_title,
    c.lifecycle_stage,
    c.created_at
  FROM contacts.contacts c
  WHERE c.tenant_id = p_tenant_id
  ORDER BY c.created_at DESC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
*/